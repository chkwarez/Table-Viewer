<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CheckIndicesFragmentation" xml:space="preserve">
    <value>SELECT	t.[object_id] AS "TableObjectID", ix.index_id AS "IndexID",
ix.name AS "IndexName",
'[' + s.name + '].[' + t.name + ']' AS "TableName",
ROUND(avg_fragmentation_in_percent, 2) AS "FragementPct",
(CASE WHEN ps.avg_fragmentation_in_percent &gt; 15 THEN 'REBUILD' ELSE 'REORGANIZE' END) AS "Status",
(
	'ALTER INDEX [' + ix.name + '] ON [' + s.name + '].[' + t.name + '] ' +
	(CASE WHEN ps.avg_fragmentation_in_percent &gt; 15 THEN 'REBUILD' ELSE 'REORGANIZE' END) +
	(CASE WHEN pc.partition_count &gt; 1 THEN ' PARTITION = ' + CAST(ps.partition_number AS nvarchar(MAX)) ELSE '' END)
) AS "SuggestSQL"
FROM   sys.indexes AS ix
INNER JOIN sys.tables t
ON t.[object_id] = ix.[object_id]
INNER JOIN sys.schemas s
ON t.schema_id = s.schema_id
INNER JOIN (
	SELECT [object_id],
	index_id,
	avg_fragmentation_in_percent,
	partition_number
	FROM    sys.dm_db_index_physical_stats (DB_ID(), NULL, NULL, NULL, NULL)
) AS ps
ON t.[object_id] = ps.[object_id]
AND ix.index_id = ps.index_id
INNER JOIN (
	SELECT  [object_id],
	index_id ,
	COUNT(DISTINCT partition_number) AS partition_count
	FROM     sys.partitions
	GROUP BY [object_id],
	index_id
) AS pc
ON t.[object_id] = pc.[object_id]
AND ix.index_id = pc.index_id
WHERE  ps.avg_fragmentation_in_percent &gt; 10
AND ix.name IS NOT NULL
ORDER BY s.name, t.name</value>
  </data>
  <data name="CountTableRows" xml:space="preserve">
    <value>SELECT ta.[object_id], sc.name AS "schema_name", ta.name AS "table_name", pa.rows AS "rows"
FROM sys.tables AS ta
INNER JOIN sys.partitions AS pa
ON pa.OBJECT_ID = ta.OBJECT_ID
INNER JOIN sys.schemas AS SC
ON ta.schema_id = sc.schema_id
WHERE ta.is_ms_shipped = 0
AND pa.index_id IN (1,0)
ORDER BY sc.name, ta.name</value>
  </data>
  <data name="FixOrphanedUser" xml:space="preserve">
    <value>EXEC sp_change_users_login 'Auto_Fix', @user</value>
  </data>
  <data name="GetAllColumnDesc" xml:space="preserve">
    <value>SELECT sc.name AS "ColumnName",
sep.value AS "Description"
FROM sys.columns AS sc
INNER JOIN sys.extended_properties sep 
ON sc.[object_id] = sep.major_id
AND sc.column_id = sep.minor_id
AND sep.name = 'MS_Description'
WHERE sc.[object_id] = @ObjectID</value>
  </data>
  <data name="GetAllColumns" xml:space="preserve">
    <value>SELECT obj.[object_id] AS "ObjectId",
c.column_id AS "ColumnId",
sch.name AS "Schema",
obj.name AS "ObjectName",
sch.name + '.' + obj.name AS "FullName",
c.name AS "ColumnName", 
st.name + (CASE st.name
WHEN 'numeric' THEN '(' + CAST(c.precision AS nvarchar) + ',' + CAST(c.scale AS nvarchar) + ')'
WHEN 'decimal' THEN '(' + CAST(c.precision AS nvarchar) + ',' + CAST(c.scale AS nvarchar) + ')'
WHEN 'varchar' THEN '(' + CAST(c.max_length AS nvarchar) + ')'
WHEN 'nvarchar' THEN '(' + CAST((c.max_length / 2) AS nvarchar) + ')'
WHEN 'char' THEN '(' + CAST(c.max_length AS nvarchar) + ')'
WHEN 'nchar' THEN '(' + CAST(c.max_length AS nvarchar) + ')'
ELSE '' END) AS "DataType"
FROM sys.columns AS c
INNER JOIN sys.objects AS obj
ON c.[object_id] = obj.[object_id]
INNER JOIN sys.schemas AS sch
ON obj.schema_id = sch.schema_id
INNER JOIN sys.types AS st
ON c.system_type_id = st.system_type_id
AND c.user_type_id = st.user_type_id
WHERE obj.type_desc = N'USER_TABLE'</value>
  </data>
  <data name="GetAllUserRoles" xml:space="preserve">
    <value>SELECT mp.name AS DatabaseUser, rp.name AS DatabaseRole
FROM sys.database_role_members drm
INNER JOIN sys.database_principals rp
ON drm.role_principal_id = rp.principal_id
INNER JOIN sys.database_principals mp 
ON drm.member_principal_id = mp.principal_id</value>
  </data>
  <data name="GetDatabaseRestoreHistory" xml:space="preserve">
    <value>SELECT [d].[name] ,
[d].[create_date] ,
[d].[compatibility_level] ,
[d].[collation_name] ,
r.restore_history_id,
r.restore_type, r.backup_set_id, r.user_name,
r.restore_date, r.replace, r.recovery, r.restart
FROM master.sys.databases d
LEFT OUTER JOIN msdb.dbo.[restorehistory] r
ON r.[destination_database_name] = d.Name
WHERE d.Name = DB_NAME()
ORDER BY r.restore_date DESC</value>
  </data>
  <data name="GetDatabasesFiles" xml:space="preserve">
    <value>SELECT f.file_id, f.type_desc, f.name AS "FileName", f.physical_name AS "FilePath"
FROM sys.master_files AS f
INNER JOIN sys.databases AS db
ON f.database_id = db.database_id
WHERE db.name = @name</value>
  </data>
  <data name="GetOrphanedUsers" xml:space="preserve">
    <value>EXEC sp_change_users_login 'Report'</value>
  </data>
  <data name="GetSynonyms" xml:space="preserve">
    <value>SELECT * FROM SYS.SYNONYMS ORDER BY type, name</value>
  </data>
  <data name="GetTableForeignKeys" xml:space="preserve">
    <value>SELECT fk.[object_id] AS 'const_object_id', fk.name, pc.name AS "parent_col", rt.[object_id] AS "ref_object_id", rtm.name AS "ref_schema", rt.name AS "ref_table", rc.name AS "ref_col"
FROM sys.foreign_keys AS fk
INNER JOIN sys.foreign_key_columns AS fkc
ON fk.OBJECT_ID = fkc.constraint_object_id
INNER JOIN sys.columns AS pc
ON fkc.parent_object_id = pc.[object_id]
AND fkc.parent_column_id = pc.column_id
INNER JOIN sys.objects AS rt
ON fkc.referenced_object_id = rt.[object_id]
INNER JOIN sys.schemas AS rtm
ON rt.schema_id = rtm.schema_id
INNER JOIN sys.columns AS rc
ON fkc.referenced_object_id = rc.[object_id]
AND fkc.referenced_column_id = rc.column_id
WHERE fk.parent_object_id = @parent_object_id
ORDER BY fkc.parent_object_id</value>
  </data>
  <data name="GetTableIndices" xml:space="preserve">
    <value>--DECLARE @object_id int
--DECLARE @index_type nvarchar(10) = 'IX'

DECLARE @is_unique_constraint bit = (CASE @index_type WHEN 'UK' THEN 1 WHEN 'IX' THEN 0 ELSE NULL END)

SELECT t.[object_id], i.index_id, OBJECT_SCHEMA_NAME(t.[object_id],DB_ID()) AS "schema",
t.[name] AS "table_name", i.[name] AS "index_name",
ac.column_id, ac.[name] AS "column_name", ic.key_ordinal, ic.[is_included_column]
--i.[type_desc], i.[data_space_id], i.[ignore_dup_key], i.[is_primary_key]
--i.[is_unique_constraint], i.[fill_factor],    i.[is_padded], i.[is_disabled], i.[is_hypothetical],
--i.[allow_row_locks], i.[allow_page_locks], ic.[is_descending_key],
FROM sys.[tables] AS t
INNER JOIN sys.[indexes] i
ON t.[object_id] = i.[object_id]
INNER JOIN sys.[index_columns] ic
ON i.[object_id] = ic.[object_id]
AND i.[index_id] = ic.[index_id]
INNER JOIN sys.[all_columns] ac ON
t.[object_id] = ac.[object_id]
AND ic.[column_id] = ac.[column_id]
WHERE t.[is_ms_shipped] = 0
AND i.[type_desc] = 'NONCLUSTERED' --NOT IN ('HEAP', 'CLUSTERED')
AND i.[is_unique_constraint] = @is_unique_constraint
AND (t.[object_id] = @object_id OR @object_id IS NULL)
ORDER BY t.[name], i.[index_id], ic.[key_ordinal]</value>
  </data>
  <data name="GetTableUniqueKeys" xml:space="preserve">
    <value>SELECT i.[object_id],
kc.name AS "object_name",
c.column_id,
c.[name] AS "column_name",
ic.key_ordinal
FROM sys.[key_constraints] AS [kc]
INNER JOIN sys.[indexes] AS [i]
ON [i].[object_id] = [kc].[parent_object_id]
AND [i].[index_id] = [kc].[unique_index_id]
INNER JOIN sys.[index_columns] AS [ic]
ON [ic].[object_id] = [i].[object_id]
AND [ic].[index_id] = [i].[index_id]
INNER JOIN sys.[columns] AS [c]
ON [c].[object_id] = [kc].[parent_object_id]
AND [c].[column_id] = [ic].[column_id]
WHERE kc.[type] = 'UQ'
AND kc.parent_object_id = @parent_object_id
ORDER BY i.[object_id], ic.key_ordinal</value>
  </data>
  <data name="ListUserRole" xml:space="preserve">
    <value>SELECT t.*,
STUFF((
	select ',' + rp.name
	from sys.database_role_members drm
	join sys.database_principals rp on (drm.role_principal_id = rp.principal_id)
	join sys.database_principals mp on (drm.member_principal_id = mp.principal_id)
	where mp.name = t.name
	FOR XML PATH('')
), 1, 1, '') AS [database_roles]
FROM sys.database_principals AS t
ORDER BY t.type DESC, t.name</value>
  </data>
  <data name="RebuildAllIndices" xml:space="preserve">
    <value>DECLARE @fillfactor int = 80
DECLARE @TableName varchar(255)
DECLARE @sql nvarchar(500)

DECLARE TableCursor CURSOR FOR
SELECT OBJECT_SCHEMA_NAME([object_id]) + '.' + name AS TableName
FROM sys.tables

OPEN TableCursor
FETCH NEXT FROM TableCursor INTO @TableName
WHILE @@FETCH_STATUS = 0 BEGIN
	
	SET @sql = 'ALTER INDEX ALL ON ' + @TableName + ' REBUILD WITH (FILLFACTOR = ' + CONVERT(VARCHAR(3),@fillfactor) + ')'
	EXEC (@sql)
	FETCH NEXT FROM TableCursor INTO @TableName
	
END
CLOSE TableCursor
DEALLOCATE TableCursor</value>
  </data>
  <data name="SearchDatabaseObjects" xml:space="preserve">
    <value>SELECT obj.*, sch.name AS schema_name
FROM sys.objects AS obj
INNER JOIN sys.schemas AS sch ON obj.schema_id = sch.schema_id
WHERE (obj.[type] = @obj_type OR obj.[type] = @obj_type2)
AND (obj.name like @name OR @name = '' OR @name IS NULL)
AND (sch.name like @schema OR @schema = '' OR @schema IS NULL)
AND ((obj.modify_date &gt;= @modify_dateS AND obj.modify_date &lt;= @modify_dateE) OR (obj.modify_date &gt;= @modify_dateS AND @modify_dateE is null) OR (obj.modify_date &lt;= @modify_dateE AND @modify_dateS is null) OR (@modify_dateS IS NULL AND @modify_dateE IS NULL))
AND (OBJECT_DEFINITION(obj.object_id) like '%' + @code + '%' OR @code = '' OR @code IS NULL)
ORDER BY obj.name</value>
  </data>
  <data name="SearchTableByPrimaryKey" xml:space="preserve">
    <value>WITH cte AS (
	SELECT t.[object_id] AS "TableObjectID", c.[column_id] AS "ColumnID", t.name AS "TableName", c.name AS "ColumnName", c.is_identity AS "IsIdent",
	CASE WHEN pkd.[object_id] IS NULL THEN 0 ELSE 1 END AS "IsKey"
	FROM sys.objects AS t
	INNER JOIN sys.all_columns AS c
	ON t.[object_id] = c.[object_id]
	LEFT OUTER JOIN sys.indexes AS pk
	ON c.[object_id] = pk.[object_id]
	AND pk.is_primary_key = 1
	LEFT OUTER JOIN sys.index_columns AS pkd
	ON pk.[object_id] = pkd.[object_id]
	AND pk.[index_id] = pkd.[index_id]
	AND c.[column_id] = pkd.[column_id]
	WHERE c.name = @ColumnName
	AND t.type = N'U '
)
SELECT * FROM cte
WHERE (IsKey = @IsKey OR @IsKey IS NULL)
ORDER BY IsIdent DESC, IsKey DESC, ColumnID</value>
  </data>
</root>